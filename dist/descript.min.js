/*! descript 1.0.0 (https://github.com/mobify/descript) */
!function(a){if("function"==typeof define&&define.amd)define(["$"],a);else{var b=window.Zepto||window.jQuery;a(b)}}(function(a){var b="default",c={src:function(b,c){var d=b.attr("x-src");return d&&("regexp"===a.type(c)?c.test(d):b.is('[x-src*="'+c+'"]'))},contains:function(b,c){var d=b.attr("x-src"),e=b.text();return!d&&("regexp"===a.type(c)?c.test(e):e.indexOf(c)>=0)}},d=function(b){return d.prototype._instance?d.prototype._instance:(d.prototype._instance=this,this.options=a.extend(!0,{},d.DEFAULTS,b),this.searchers=c,void this._buildDefaultContainer())};return d.VERSION="1.0.0",d.DEFAULTS={preserve:null},d.init=function(a){return d.prototype._instance||new d(a)},d.prototype.get=function(a){if(!a)throw new Error("You must specify a script container");var b=this.getAll()[a];if(!b)throw new Error("The "+a+" script container is empty");return b},d.prototype.getAll=function(){var b=this;return this._containers||(this._containers={},this._scripts.map(function(c){var d=c.container,e=b._containers[d]||a();b._containers[d]=e.add(c.$script)})),this._containers},d.prototype.add=function(a,b){return this._each(b,function(b,c){c.container=a}),this},d.prototype.remove=function(a){var b=this;return this._each(a,function(a){b._removeScript(a)}),this},d.prototype.exists=function(a){return!!this._find(a)},d.prototype.insertScript=function(b,c){var d=this._find(b),e=function(){var b=a("<script />");return"function"===a.type(c)?b.attr("type","text/mobify-script").text("("+c.toString()+")();")[0]:b.attr("x-src",c)};d&&this._scripts.splice(d.index+1,0,{container:d.script.container,$script:e()})},d.prototype.replace=function(a,b,c){var d=this._find(a);if(d&&d.script){var e=d.script,f=[];3===arguments.length?f.push({pattern:b,replacement:c}):f=b;for(var g=0,h=f.length;h>g;g++){var i=f[g];e.$script.text(e.$script.text().replace(i.pattern,i.replacement))}}},d.prototype.addSearcher=function(a,b){this.searchers[a]=b},d.prototype._buildDefaultContainer=function(){this._scripts=a('script[x-src], script[type="text/mobify-script"]').map(function(c,d){var e=a(d);return{container:b,$script:e}}).get(),this.options.preserve&&this.remove(this.options.preserve);for(var c=0;c<this._scripts.length;c++){var d=this._scripts[c].$script;this._scripts[c].$script=d.remove()}},d.prototype._getSearchPatterns=function(b){return"regexp"===a.type(b)?[b]:"string"===a.type(b)?b.indexOf(",")>=0?b.replace(/\s/,"").split(","):[b]:b},d.prototype._removeScript=function(a){var b=this._scripts,c=b.slice(a+1||b.length);b.length=0>a?b.length+a:a,b.push.apply(b,c)},d.prototype._each=function(b,c){var d=this._scripts;for(var e in b)if(b.hasOwnProperty(e))for(var f=this._getSearchPatterns(b[e]),g=this.searchers[e],h=f.length;h--;)for(var i=d.length;i--;){var j=d[i];g(a(j.$script),f[h])&&c(i,j)}},d.prototype._find=function(b){var c,d,e,f,g=this._scripts,h=Object.keys(b);if(h.length>1)throw new Error("The searchType parameter should contain only one type, i.e. { src: 'script1' }");if(c=h[0],d=b[c],a.isArray(d)&&d.length>1)throw new Error("The searchType value should be a string or an array with only a single item, i.e. { src: 'script1' } or { contains: ['script1'] }");for(e=this.searchers[c],f=g.length;f--;){var i=g[f];if(e(a(i.$script),b[c]))return{script:i,index:f}}},d});